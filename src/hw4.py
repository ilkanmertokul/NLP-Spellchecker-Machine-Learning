# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11zqkFf0WhHY6vo3UjJSpR7qAo_i1eg9R
"""

import nltk
import math
nltk.download('punkt')

import tensorflow as tf
import numpy as np
from tensorflow import keras
from keras import optimizers
from tensorflow.keras.optimizers import Adam, SGD, RMSprop

#-------------------------------------

#Texts to test!
tests = ["cin seddi sinirina yaklastilar",
         "baskentinin istedigi buydu",
         "guneye dogru ilerlediler",
         "uc tane asker cin'in hakimiydi",
         "suslu manciniklari ogretti",
         "yapabilecek durumda degildi",
         "muhafiz kitasi oldu",
         "surlara dogru surdu",
         "oldugu tartisma konusudur",
         "celaleddin'in pesine dustu",
         "ayrildigi haberini aldi",
         "hanedaninin tavrini unutmamisti",
         "ele gecirmek konu oldu",
         "oncu birlik dayanmisti",
         "ilk kez gerceklesmisti",
         "cengiz han da ona katildi",
         "sehri ele gecirdi",
         "yapabilecek durumda degildi",
         "saldiri tuzagı kurmustu",
         "duvarlari onune yıgdı",
         ]

#-------------------------------

example1 = "/content/5.txt"
file1 = open(example1, "r")
text = file1.read()

#1: english letters data (lower)
converted_text = []
#2: turkish letters data (lower)
normal_text = []
sent_lenght = 0

#converting procedure
rules = [['ı', 'i'], ['ü', 'u'], ['ö', 'o'], ['ğ', 'g'], ['ş', 's'], ['ç', 'c']]
for letter in text.lower():
  if math.isnan(ord(letter)):
    print("nanaan")
    continue
  normal_text.append(ord(letter))
  for rule in rules:
    if letter == rule[0]:
      letter = rule[1]
  converted_text.append(ord(letter))
  sent_lenght +=1

#--------------------------

optimizer = tf.keras.optimizers.Adam(clipvalue=0.05)
model = tf.keras.Sequential([keras.layers.Dense(units=1, input_shape=[1])])
model.compile(optimizer=optimizer, loss='mean_squared_logarithmic_error')

xs = np.array(converted_text, dtype=int)
ys = np.array(normal_text, dtype=int)
model.fit(xs, ys, epochs=15)

#Texts to test!
tests = ["cin seddi sinirina yaklastilar",
         "baskentinin istedigi buydu",
         "guneye dogru ilerlediler",
         "uc tane asker cin'in hakimiydi",
         "suslu manciniklari ogretti",
         "yapabilecek durumda degildi",
         "muhafiz kitasi oldu",
         "surlara dogru surdu",
         "oldugu tartisma konusudur",
         "celaleddin'in pesine dustu",
         "ayrildigi haberini aldi",
         "hanedaninin tavrini unutmamisti",
         "ele gecirmek konu oldu",
         "oncu birlik dayanmisti",
         "ilk kez gerceklesmisti",
         "cengiz han da ona katildi",
         "sehri ele gecirdi",
         "yapabilecek durumda degildi",
         "saldiri tuzagı kurmustu",
         "duvarlari onune yıgdı",
         ]


#converting procedure
rules = [['ı', 'i'], ['ü', 'u'], ['ö', 'o'], ['ğ', 'g'], ['ş', 's'], ['ç', 'c']]

for test in tests:
  result = []
  for letter in test:
    result.append(ord(letter))
  
  predictions = model.predict(result)
  result = []
  
  for i in range(0,len(predictions)):
    found = 0
    for rule in rules:
      if test[i] == rule[0] or test[i] == rule[1]:
        found = 1
        if predictions[i] - ord(rule[0]) < predictions[i] - ord(rule[1]):
          result.append(ord(rule[0]))
        else:
          result.append(ord(rule[1]))
    if found == 0:
      result.append(ord(test[i]))

  print(" --- ")
  print(f"unchanged = {test}\npredicted =",end=" ")
  for letter in result:
    print(chr(letter),end="")
  print(" ")

